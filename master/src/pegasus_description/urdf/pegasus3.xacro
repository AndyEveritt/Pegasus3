<?xml version="1.0"?>
<robot name="pegasus3" 
    xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!-- Put here the robot description -->

    <xacro:arg name="laser_enabled" default="false" />
    <xacro:arg name="kinect_enabled" default="true" />

    <!-- <xacro:property name="PI" value="3.1415926535897931"/>

    <xacro:property name="chassisHeight" value="0.3"/>
    <xacro:property name="chassisLength" value="0.71"/>
    <xacro:property name="chassisWidth" value="0.63"/>
    <xacro:property name="chassisMass" value="20"/>

    <xacro:property name="suspensionRadius" value="0.009"/>

    <xacro:property name="suspensionMainHeight" value="0.35"/>
    <xacro:property name="suspensionMainLength" value="0.95"/>
    <xacro:property name="suspensionMainWidth" value="0.032"/>
    <xacro:property name="suspensionMainMass" value="3"/>

    <xacro:property name="suspensionSubHeight" value="0.17"/>
    <xacro:property name="suspensionSubLength" value="0.45"/>
    <xacro:property name="suspensionSubWidth" value="0.032"/>
    <xacro:property name="suspensionSubMass" value="1"/>

    <xacro:property name="wheelWidth" value="0.05"/>
    <xacro:property name="wheelRadius" value="0.1"/>
    <xacro:property name="wheelMass" value="1"/>

    <xacro:property name="cameraSize" value="0.05"/>
    <xacro:property name="cameraMass" value="0.1"/>

    <xacro:include filename="$(find pegasus3_description)/urdf/pegasus3.gazebo" />
    <xacro:include filename="$(find pegasus3_description)/urdf/materials.xacro" />
    <xacro:include filename="$(find pegasus3_description)/urdf/macros.xacro" /> -->


    <!-- Degree-to-radian conversions -->
    <xacro:property name="degrees_45" value="0.785398163"/>
    <xacro:property name="degrees_90" value="1.57079633"/>
    <xacro:property name="M_PI" value="3.1415926535897931" />

    <!-- body_length is measured along the x axis, body_width
       along the y axis, and body_height along the z axis. -->
    <xacro:property name="body_length" value="0.71"/>
    <xacro:property name="body_width" value="0.63"/>
    <xacro:property name="body_height" value="0.05"/>
    <xacro:property name="body_mass" value="10"/>
    <xacro:property name="body_clearance" value="0.40"/>

    <!-- electronics_length is measured along the x axis, electronics_width
       along the y axis, and electronics_height along the z axis. -->
    <xacro:property name="electronics_length" value="0.4"/>
    <xacro:property name="electronics_width" value="0.63"/>
    <xacro:property name="electronics_height" value="0.3"/>
    <xacro:property name="electronics_mass" value="10"/>
    <xacro:property name="electronics_clearance" value="0.40"/>

    <xacro:property name="wheelbase_rocker" value="1.0"/>
    <xacro:property name="wheelbase_bogie" value="0.40"/>
    <xacro:property name="x_center_rocker" value="0.045"/>
    <xacro:property name="x_center_bogie" value="0.20"/>
    <xacro:property name="track" value="0.800"/>

    <!-- hub_dia and tire_dia are the diameters of the hub and tire,
       respectively. hex_hub_depth is the distance that the hex hub is
       inset from the outer edge of the tire. It is set so that each wheel
       is a "zero offset" wheel. hex_hub_depth = tire_width / 2 -
       axle_length. -->
    <xacro:property name="hub_dia" value="0.180"/>
    <xacro:property name="tire_dia" value="0.2"/>
    <xacro:property name="tire_width" value="0.05"/>
    <xacro:property name="wheel_mass" value="0.200"/>

    <!-- The specifications for a Titan(R) 550 motor could not be found, so the
       stall torque of a Mabuchi Motor(R) RS-550VC-7525 motor was used instead.

       num_spur_gear_teeth = 68
       num_pinion_gear_teeth = 19
       final_gear_ratio = (num_spur_gear_teeth / num_pinion_gear_teeth) *
         5.22 = 18.68
       stall_torque = 0.549 N m
       axle_eff_limit = ((2 * stall_torque) * final_gear_ratio) / 4 =
         5.12766 N m

       max_speed = 40 mph (30+ mph) = 17.8816 m/s
       axle_vel_limit = (2 * pi) * (max_speed / (pi * tire_dia)) =
         244.8696 rad/s -->
    <xacro:property name="axle_eff_limit" value="200"/>
    <xacro:property name="axle_vel_limit" value="244.8696"/>


    <material name="body_mat">
        <color rgba="0.5 0.5 0.5 1"/>
    </material>
    <material name="tire_mat">
        <color rgba="0 0 0 1"/>
    </material>

    <!-- Null inertial element. This is needed to make the model work with
       Gazebo. -->
    <xacro:macro name="null_inertial">
        <inertial>
            <mass value="0.001"/>
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
        </inertial>
    </xacro:macro>

    <!-- Inertia of a solid cuboid. Width is measured along the x axis, depth
       along the y axis, and height along the z axis. -->
    <xacro:macro name="solid_cuboid_inertial" params="width depth height mass *origin">
        <inertial>
            <xacro:insert_block name="origin"/>
            <mass value="${mass}"/>
            <inertia ixx="${mass * (depth * depth + height * height) / 12}" ixy="0" ixz="0" iyy="${mass * (width * width + height * height) / 12}" iyz="0" izz="${mass * (width * width + depth * depth) / 12}"/>
        </inertial>
    </xacro:macro>

    <!-- Inertia of a thick-walled cylindrical tube with open ends. Height is
       measured along the z axis, which is the tube's axis. inner_rad and
       outer_rad are the tube's inner and outer radii, respectively. -->
    <xacro:macro name="thick_walled_tube_inertial" params="inner_rad outer_rad height mass">
        <inertial>
            <mass value="${mass}"/>
            <inertia ixx="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}" ixy="0" ixz="0" iyy="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}" iyz="0" izz="${mass * (inner_rad * inner_rad +
                    outer_rad * outer_rad) / 2}"/>
        </inertial>
    </xacro:macro>

    <!-- The "wheel" macro defines an axle carrier, axle, and wheel. -->
    <xacro:macro name="wheel" params="lr_prefix fr_prefix lr_pos fr_pos">
        <joint name="${lr_prefix}_${fr_prefix}_axle" type="continuous">
            <parent link="base_link"/>
            <child link="${lr_prefix}_${fr_prefix}_wheel"/>
            <origin xyz="${fr_pos}
                   ${lr_pos}
                   ${- body_clearance}" rpy="${degrees_90} 0 0"/>
            <axis xyz="0 0 -1"/>
            <limit effort="${axle_eff_limit}" velocity="${axle_vel_limit}"/>
        </joint>
        <transmission name="${lr_prefix}_${fr_prefix}_axle_trans">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${lr_prefix}_${fr_prefix}_axle">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>
            <actuator name="${lr_prefix}_${fr_prefix}_axle_act">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>

        <link name="${lr_prefix}_${fr_prefix}_wheel">
            <visual>
                <origin xyz="0 0 0"/>
                <geometry>
                    <cylinder radius="${tire_dia / 2}" length="${tire_width}"/>
                </geometry>
                <material name="tire_mat"/>
            </visual>

            <collision>
                <origin xyz="0 0 0"/>
                <geometry>
                    <cylinder radius="${tire_dia / 2}" length="${tire_width}"/>
                </geometry>
            </collision>

            <xacro:thick_walled_tube_inertial inner_rad="${hub_dia / 2}" outer_rad="${tire_dia / 2}" height="${tire_width}" mass="${wheel_mass}"/>
        </link>

        <gazebo reference="${lr_prefix}_${fr_prefix}_wheel">
            <material>Gazebo/Black</material>
        </gazebo>
    </xacro:macro>

    <!-- base_link must have geometry so that its axes can be displayed in
       rviz. -->
    <link name="base_link">
        <visual>
            <geometry>
                <box size="0.05 0.05 0.01"/>
            </geometry>
            <material name="body_mat"/>
        </visual>
    </link>
    <gazebo reference="base_link">
        <material>Gazebo/Green</material>
    </gazebo>

    <joint name="imu_joint" type="fixed">
        <axis xyz="1 0 0"/>
        <origin xyz="0 0 0.05"/>
        <parent link="base_link"/>
        <child link="imu_link"/>
    </joint>

    <link name="imu_link">
        <inertial>
            <mass value="0.001"/>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.0001"/>
        </inertial>
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <box size="0.001 0.001 0.001"/>
            </geometry>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <box size=".001 .001 .001"/>
            </geometry>
        </collision>
    </link>

    <!-- body -->
    <link name="body">
        <visual>
            <origin xyz="0 0 ${-body_height / 2}"/>
            <geometry>
                <box size="${body_length} ${body_width} ${body_height}"/>
            </geometry>
            <material name="body_mat"/>
        </visual>

        <collision>
            <origin xyz="0 0 ${-body_height / 2}"/>
            <geometry>
                <box size="${body_length} ${body_width} ${body_height}"/>
            </geometry>
        </collision>

        <xacro:solid_cuboid_inertial width="${body_length}" depth="${body_width}" height="${body_height}" mass="${body_mass}">
            <origin xyz="0 0 ${-body_height / 2}"/>
        </xacro:solid_cuboid_inertial>
    </link>
    <gazebo reference="body">
        <material>Gazebo/Grey</material>
    </gazebo>

    <joint name="base_link_to_chasis" type="fixed">
        <parent link="base_link"/>
        <child link="body"/>
    </joint>

    <!-- electronics case -->
    <link name="electronics">
        <visual>
            <origin xyz="${- body_length / 4} 0 ${electronics_height / 2}"/>
            <geometry>
                <box size="${electronics_length} ${electronics_width} ${electronics_height}"/>
            </geometry>
            <material name="body_mat"/>
        </visual>

        <collision>
            <origin xyz="${- body_length / 4} 0 ${electronics_height / 2}"/>
            <geometry>
                <box size="${electronics_length} ${electronics_width} ${electronics_height}"/>
            </geometry>
        </collision>

        <xacro:solid_cuboid_inertial width="${electronics_length}" depth="${electronics_width}" height="${electronics_height}" mass="${electronics_mass}">
            <origin xyz="0 0 ${-body_height / 2}"/>
        </xacro:solid_cuboid_inertial>
    </link>
    <gazebo reference="electronics">
        <material>Gazebo/Red</material>
    </gazebo>

    <joint name="chassis_link_to_electronics" type="fixed">
        <parent link="body"/>
        <child link="electronics"/>
    </joint>

    <!-- Wheels -->
    <xacro:wheel lr_prefix="left_bogie" fr_prefix="front" lr_pos="${track / 2}" fr_pos="${x_center_bogie + wheelbase_bogie / 2}" />
    <xacro:wheel lr_prefix="left_bogie" fr_prefix="rear" lr_pos="${track / 2}" fr_pos="${x_center_bogie - wheelbase_bogie / 2}" />
    <xacro:wheel lr_prefix="left_rocker" fr_prefix="rear" lr_pos="${track / 2}" fr_pos="${x_center_rocker - wheelbase_rocker / 2}" />
    <xacro:wheel lr_prefix="right_bogie" fr_prefix="front" lr_pos="${- track / 2}" fr_pos="${x_center_bogie + wheelbase_bogie / 2}" />
    <xacro:wheel lr_prefix="right_bogie" fr_prefix="rear" lr_pos="${- track / 2}" fr_pos="${x_center_bogie - wheelbase_bogie / 2}" />
    <xacro:wheel lr_prefix="right_rocker" fr_prefix="rear" lr_pos="${- track / 2}" fr_pos="${x_center_rocker - wheelbase_rocker / 2}" />


    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <legacyModeNS>true</legacyModeNS>
        </plugin>
    </gazebo>

    <xacro:if value="$(arg kinect_enabled)">
        <!-- Depth sensor -->
        <xacro:include filename="$(find pegasus_description)/urdf/depth_sensor.urdf.xacro" />
        <xacro:depth_sensor name="camera" parent="base_link">
            <origin xyz="${body_length / 2 + 0.05} 0.0 ${-2 * body_height}" rpy="0 0 0"/>
        </xacro:depth_sensor>
    </xacro:if>

    <xacro:if value="$(arg laser_enabled)">
        <joint name="hokuyo_joint" type="fixed">
            <axis xyz="0 1 0" />
            <origin xyz=".15 0 .1" rpy="0 0 0"/>
            <parent link="base_link"/>
            <child link="hokuyo"/>
        </joint>

        <!-- Hokuyo Laser -->
        <link name="hokuyo">
            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="0.1 0.1 0.1"/>
                </geometry>
            </collision>

            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <mesh filename="package://pegasus_description/meshes/hokuyo.dae"/>
                </geometry>
            </visual>

            <inertial>
                <mass value="1e-5" />
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
            </inertial>
        </link>
        <gazebo reference="hokuyo">
            <sensor type="ray" name="head_hokuyo_sensor">
                <pose>0 0 0 0 0 0</pose>
                <visualize>true</visualize>
                <update_rate>40</update_rate>
                <ray>
                    <scan>
                        <horizontal>
                            <samples>720</samples>
                            <resolution>1</resolution>
                            <min_angle>${-62.8 * M_PI/360.0}</min_angle>
                            <max_angle>${62.8 * M_PI/360.0}</max_angle>
                        </horizontal>
                    </scan>
                    <range>
                        <min>0.4</min>
                        <max>10.0</max>
                        <resolution>0.01</resolution>
                    </range>
                    <noise>
                        <type>gaussian</type>
                        <!-- Noise parameters based on published spec for Hokuyo laser
                    achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
                    stddev of 0.01m will put 99.7% of samples within 0.03m of the true
                    reading. -->
                        <mean>0.0</mean>
                        <stddev>0.01</stddev>
                    </noise>
                </ray>
                <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
                    <topicName>/pegasus3/scan</topicName>
                    <frameName>hokuyo</frameName>
                </plugin>
            </sensor>
        </gazebo>
    </xacro:if>

    <!-- IMU sensor-->
    <gazebo>
        <plugin name="imu_sim" filename="libhector_gazebo_ros_imu.so" type="imu">
            <alwaysOn>true</alwaysOn>
            <topicName>imu/data</topicName>
            <updateRate>100.0</updateRate>
            <serviceName>imu_service</serviceName>
            <bodyName>imu_link</bodyName>
            <frameId>imu_link</frameId>

            <accelOffset>0.1 0.1 0.1</accelOffset>
            <accelDrift>0.0 0.0 0.0</accelDrift>
            <accelDriftFrequency>0.0 0.0 0.0</accelDriftFrequency>
            <accelGaussianNoise>0.35 0.35 0.3</accelGaussianNoise>

            <rateOffset>0.0 0.0 0.0</rateOffset>
            <rateDrift>0.01 0.01 0.01</rateDrift>
            <rateDriftFrequency>0.0 0.0 0.0</rateDriftFrequency>
            <rateGaussianNoise>0.05 0.05 0.015</rateGaussianNoise>

            <headingOffset>0.0 0.0 0.0</headingOffset>
            <headingDrift>0.0 0.0 0.0</headingDrift>
            <headingDriftFrequency>0.0 0.0 0.0</headingDriftFrequency>
            <headingGaussianNoise>0.05 0.05 0.05</headingGaussianNoise>
        </plugin>
    </gazebo>

    <plugin name="magnetic_sim" filename="libhector_gazebo_ros_magnetic.so">
        <alwaysOn>true</alwaysOn>
        <topicName>magnetic/data</topicName>
        <updateRate>100.0</updateRate>
        <bodyName>imu_link</bodyName>
        <frameId>imu_link</frameId>
        <magnitude>46967.9</magnitude>
        <declination>-2.3865</declination>
        <inclination>-61.7292</inclination>
        <offset>0.0 0.0 0.0</offset>
        <drift>0.0 0.0 0.0</drift>
        <gaussianNoise>100.0 100.0 100.0</gaussianNoise>
    </plugin>

    <plugin name="gps_sim" filename="libhector_gazebo_ros_gps.so">
        <updateRate>1.0</updateRate>
        <bodyName>imu_link</bodyName>
        <frameId>imu_link</frameId>
        <topicName>gps/fix</topicName>
        <velocityTopicName>gps/vel</velocityTopicName>
        <referenceLatitude>46.518125</referenceLatitude>
        <referenceLongitude>6.565539</referenceLongitude>
        <drift>0 0 0</drift>
        <gaussianNoise>0.0 0.0 0.0</gaussianNoise>
        <velocityDrift>0 0 0</velocityDrift>
        <velocityGaussianNoise>0.05 0.05 0.05</velocityGaussianNoise>
    </plugin>



</robot>